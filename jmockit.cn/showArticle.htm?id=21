

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>JMockit中文网</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="">
<meta name="author" content="">
<link rel="icon" href="static/images/icon.jpg" type="image/jpg">
<!-- Le styles -->
<link href="static/bootstrap/css/bootstrap.css" rel="stylesheet">
<style type="text/css">
body {
	padding-top: 60px;
	padding-bottom: 40px;
}

.sidebar-nav {
	padding: 9px 0;
}

@media ( max-width : 980px) {
	/* Enable use of floated navbar text */
	.navbar-text.pull-right {
		float: none;
		padding-left: 5px;
		padding-right: 5px;
	}
}
#channelNav  li  {
clear:none;
}
 
</style>
<link href="static/bootstrap/css/bootstrap-responsive.css" rel="stylesheet">

<script type="text/javascript" src="static/ueditor/ueditor.parse.js"></script>
<!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
<!--[if lt IE 9]>
      <script src="/static/bootstrap/js/html5shiv.js"></script>
    <![endif]-->

</head>
<body>
	<div class="navbar navbar-inverse navbar-fixed-top">
		<div class="navbar-inner">
			<div class="container-fluid">
				<button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
					<span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span>
				</button>
				<a class="brand" href="index.htm">JMockit中文网</a>
				<div class="nav-collapse collapse">
					<!-- 
					<p class="navbar-text pull-right">
						Logged in as <a href="#" class="navbar-link">Username</a>
					</p>
					 -->
					<ul class="nav" id="channelNav">

						
							<li ><a href="showChannel.htm?channel=1">JMockit简介 </a></li>
						
							<li ><a href="showChannel.htm?channel=2">JMockit基础 </a></li>
						
							<li ><a href="showChannel.htm?channel=3">JMockit常见用法 </a></li>
						
							<li ><a href="showChannel.htm?channel=4">JMockit高级用法 </a></li>
						
							<li class="active"><a href="showChannel.htm?channel=5">JMockit原理剖析 </a></li>
						
						<li><a href="https://github.com/hzdavid/jmockit.cn/issues" target="_blank">交流社区</a></li>

					</ul>
				</div>
				<!--/.nav-collapse -->
			</div>
		</div>
	</div>
<div class="container-fluid">
	<div class="row-fluid">
		
			<div class="span3">
				<div class="well sidebar-nav">
					<ul class="nav nav-list">
						
							<li ><a href="showArticle.htm?id=16">JMockit架构 </a></li>
						
							<li ><a href="showArticle.htm?id=19">JMockit启动过程 </a></li>
						
							<li ><a href="showArticle.htm?id=20">Exepectations录制原理 </a></li>
						
							<li class="active"><a href="showArticle.htm?id=21">MockUp的Mock原理 </a></li>
						

					</ul>
				</div>
			</div>
		
		<div class="span9 text-left" id="articleContent"><p style="white-space: normal;">同<span style="color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);">Exepectations</span><span style="color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; font-size: 14px; background-color: rgb(255, 255, 255);">一样，</span>MockUp的使用频率也十分高。 我们可以借鉴分析<span style="color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);">Exepectations录制原理一样，分析MockUp是如何Mock的。</span></p><p style="white-space: normal;"><span style="color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);"><br/></span></p><p style="white-space: normal;"><span style="color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);">以<a href="showArticle.htm?id=2" target="_blank" style="color: rgb(0, 136, 204); text-decoration: underline; font-size: 16px;"><span style="color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255); font-size: 16px;">类的Mock</span></a>中提到的测试程序ClassMockingByMockUpTest为例，我们看看MockUp对AnOrdinaryClass类重定义后是什么样子呢？通过一些反编译工具，我们抓取到的反编译代码如下：</span></p><pre class="brush:java;toolbar:false">public&nbsp;class&nbsp;AnOrdinaryClass&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;AnOrdinaryClass()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TestRun.lineExecuted(0,&nbsp;4);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;super();
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;public&nbsp;static&nbsp;int&nbsp;staticMethod()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mockit.internal.state.TestRun.updateFakeState(&quot;cn/jmockit/demos/usual/ClassMockingByMockUpTest$AnOrdinaryClassMockUp&quot;,&nbsp;-1))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;AnOrdinaryClassMockUp.staticMethod();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TestRun.lineExecuted(0,&nbsp;7);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;1;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;ordinaryMethod()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mockit.internal.state.TestRun.updateFakeState(&quot;cn/jmockit/demos/usual/ClassMockingByMockUpTest$AnOrdinaryClassMockUp&quot;,&nbsp;-1))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;((AnOrdinaryClassMockUp)mockit.internal.state.TestRun.getFake(&quot;cn/jmockit/demos/usual/ClassMockingByMockUpTest$AnOrdinaryClassMockUp&quot;)).ordinaryMethod();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TestRun.lineExecuted(0,&nbsp;12);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;2;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;

&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;final&nbsp;int&nbsp;finalMethod()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mockit.internal.state.TestRun.updateFakeState(&quot;cn/jmockit/demos/usual/ClassMockingByMockUpTest$AnOrdinaryClassMockUp&quot;,&nbsp;-1))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;((AnOrdinaryClassMockUp)mockit.internal.state.TestRun.getFake(&quot;cn/jmockit/demos/usual/ClassMockingByMockUpTest$AnOrdinaryClassMockUp&quot;)).finalMethod();
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TestRun.lineExecuted(0,&nbsp;17);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;3;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}

&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;navtiveMethod()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;mockit.internal.state.TestRun.updateFakeState(&quot;cn/jmockit/demos/usual/ClassMockingByMockUpTest$AnOrdinaryClassMockUp&quot;,&nbsp;-1);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;((AnOrdinaryClassMockUp)mockit.internal.state.TestRun.getFake(&quot;cn/jmockit/demos/usual/ClassMockingByMockUpTest$AnOrdinaryClassMockUp&quot;)).navtiveMethod();
&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;
&nbsp;&nbsp;&nbsp;
&nbsp;&nbsp;&nbsp;&nbsp;private&nbsp;int&nbsp;privateMethod()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;if&nbsp;(mockit.internal.state.TestRun.updateFakeState(&quot;cn/jmockit/demos/usual/ClassMockingByMockUpTest$AnOrdinaryClassMockUp&quot;,&nbsp;-1))&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;(Integer)NegativeArraySizeException.$FMB.invoke(this,&nbsp;(Method)null,&nbsp;new&nbsp;Object[]{&quot;cn/jmockit/demos/usual/ClassMockingByMockUpTest$AnOrdinaryClassMockUp&quot;,&nbsp;&quot;cn/jmockit/demos/AnOrdinaryClass&quot;,&nbsp;2,&nbsp;&quot;privateMethod&quot;,&nbsp;&quot;()I&quot;,&nbsp;-1});
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}&nbsp;else&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TestRun.lineExecuted(0,&nbsp;25);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;5;
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;}
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;public&nbsp;int&nbsp;callPrivateMethod()&nbsp;{
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;TestRun.lineExecuted(0,&nbsp;30);
&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;return&nbsp;this.privateMethod();
&nbsp;&nbsp;&nbsp;&nbsp;}
}</pre><p style="white-space: normal;"><span style="color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);"></span><br/></p><p style="white-space: normal;">&nbsp; &nbsp;通过上面的代码，我们可以看到，JMockit<span style="color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255);">在AnOrdinaryClass的每个方法（只要是经@Mock修饰过的）中插入了一个分支，这个分支就是走MockUp类(即new&nbsp;MockUp{{}}匿名类或extends&nbsp;MockUp的子类)的mock方法，因此就达到了Mock的目的。&nbsp;这与Exepectations的Mock手法完一不同，但有异曲同工之妙。</span></p><p style="white-space: normal;"><br/></p><p style="white-space: normal;"><br/></p><p style="white-space: normal;"><br/></p><p><br/></p></div>
		<script type="text/javascript">
  	uParse('#articleContent', {
	    rootPath: '/static/ueditor/'
		})
	</script>
		
	</div>
	<!--/row-->
</div>
<!--/.fluid-container-->


<hr>
<footer>
	<p>
		<span>&copy; JMockit中文网 2017</span>&nbsp;<span><a href="showChannel.htm?channel=6">关于本站</a></span>&nbsp;<span><a href="static/images/coffee.png" target="_blank">打赏咖啡</a></span>
	</p>
</footer> 
</body>
</html>
