

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>JMockit中文网</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="">
<meta name="author" content="">
<link rel="icon" href="static/images/icon.jpg" type="image/jpg">
<!-- Le styles -->
<link href="static/bootstrap/css/bootstrap.css" rel="stylesheet">
<style type="text/css">
body {
	padding-top: 60px;
	padding-bottom: 40px;
}

.sidebar-nav {
	padding: 9px 0;
}

@media ( max-width : 980px) {
	/* Enable use of floated navbar text */
	.navbar-text.pull-right {
		float: none;
		padding-left: 5px;
		padding-right: 5px;
	}
}
#channelNav  li  {
clear:none;
}
 
</style>
<link href="static/bootstrap/css/bootstrap-responsive.css" rel="stylesheet">

<script type="text/javascript" src="static/ueditor/ueditor.parse.js"></script>
<!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
<!--[if lt IE 9]>
      <script src="/static/bootstrap/js/html5shiv.js"></script>
    <![endif]-->

</head>
<body>
	<div class="navbar navbar-inverse navbar-fixed-top">
		<div class="navbar-inner">
			<div class="container-fluid">
				<button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
					<span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span>
				</button>
				<a class="brand" href="index.htm">JMockit中文网</a>
				<div class="nav-collapse collapse">
					<!-- 
					<p class="navbar-text pull-right">
						Logged in as <a href="#" class="navbar-link">Username</a>
					</p>
					 -->
					<ul class="nav" id="channelNav">

						
							<li ><a href="showChannel.htm%3Fchannel=1">JMockit简介 </a></li>
						
							<li ><a href="showChannel.htm%3Fchannel=2">JMockit基础 </a></li>
						
							<li class="active"><a href="showChannel.htm%3Fchannel=3">JMockit常见用法 </a></li>
						
							<li ><a href="showChannel.htm%3Fchannel=4">JMockit高级用法 </a></li>
						
							<li ><a href="showChannel.htm%3Fchannel=5">JMockit原理剖析 </a></li>
						
						<li><a href="https://github.com/hzdavid/jmockit.cn/issues" target="_blank">交流社区</a></li>

					</ul>
				</div>
				<!--/.nav-collapse -->
			</div>
		</div>
	</div>
<div class="container-fluid">
	<div class="row-fluid">
		
			<div class="span3">
				<div class="well sidebar-nav">
					<ul class="nav nav-list">
						
							<li class="active"><a href="showArticle.htm%3Fid=2">Mock类 </a></li>
						
							<li ><a href="showArticle.htm%3Fid=12">Mock实例 </a></li>
						
							<li ><a href="showArticle.htm%3Fid=11">Mock接口 </a></li>
						
							<li ><a href="showArticle.htm%3Fid=13">Mock  Spring Bean </a></li>
						

					</ul>
				</div>
			</div>
		
		<div class="span9 text-left" id="articleContent"><p>再讲述如何Mock类之前，我们先给出一个普通的类，这个类有static,final,native,private方法。以及一个非static/final/native/private的普通public 方法。</p><pre class="brush:java;toolbar:false">//一个普通类&nbsp;
public&nbsp;class&nbsp;AnOrdinaryClass&nbsp;{

	//&nbsp;静态方法
	public&nbsp;static&nbsp;int&nbsp;staticMethod()&nbsp;{
		return&nbsp;1;
	}

	//&nbsp;普通方法
	public&nbsp;int&nbsp;ordinaryMethod()&nbsp;{
		return&nbsp;2;
	}

	//&nbsp;final方法
	public&nbsp;final&nbsp;int&nbsp;finalMethod()&nbsp;{
		return&nbsp;3;
	}

	//&nbsp;native方法,返回4
	public&nbsp;native&nbsp;int&nbsp;navtiveMethod();

	//&nbsp;private方法
	private&nbsp;int&nbsp;privateMethod()&nbsp;{
		return&nbsp;5;
	}

	//&nbsp;调用private方法
	public&nbsp;int&nbsp;callPrivateMethod()&nbsp;{
		return&nbsp;privateMethod();
	}
}</pre><p>下面，讲述2种Mock类的方法<br/><br/></p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p style="white-space: normal;">用Expectations来Mock。</p></li></ol><pre class="brush:java;toolbar:false">&nbsp;//用Expectations来mock类
public&nbsp;class&nbsp;ClassMockingByExpectationsTest&nbsp;{

	@Test
	public&nbsp;void&nbsp;testClassMockingByExpectation()&nbsp;{
		AnOrdinaryClass&nbsp;instanceToRecord&nbsp;=&nbsp;new&nbsp;AnOrdinaryClass();
		new&nbsp;Expectations(AnOrdinaryClass.class)&nbsp;{
			{
				//&nbsp;mock静态方法
				AnOrdinaryClass.staticMethod();
				result&nbsp;=&nbsp;10;
				//&nbsp;mock普通方法
				instanceToRecord.ordinaryMethod();
				result&nbsp;=&nbsp;20;
				//&nbsp;mock&nbsp;final方法
				instanceToRecord.finalMethod();
				result&nbsp;=&nbsp;30;
				//&nbsp;native,&nbsp;private方法无法用Expectations来Mock
			}
		};
		AnOrdinaryClass&nbsp;instance&nbsp;=&nbsp;new&nbsp;AnOrdinaryClass();
		Assert.assertTrue(AnOrdinaryClass.staticMethod()&nbsp;==&nbsp;10);
		Assert.assertTrue(instance.ordinaryMethod()&nbsp;==&nbsp;20);
		Assert.assertTrue(instance.finalMethod()&nbsp;==&nbsp;30);
		//&nbsp;用Expectations无法mock&nbsp;native方法
		Assert.assertTrue(instance.navtiveMethod()&nbsp;==&nbsp;4);
		//&nbsp;用Expectations无法mock&nbsp;private方法
		Assert.assertTrue(instance.callPrivateMethod()&nbsp;==&nbsp;5);
	}

	@BeforeClass
	//&nbsp;加载AnOrdinaryClass类的native方法的dll
	public&nbsp;static&nbsp;void&nbsp;loadNative()&nbsp;throws&nbsp;Throwable&nbsp;{
		URI&nbsp;uri&nbsp;=&nbsp;ClassLoader.class.getResource(&quot;/&quot;).toURI();
		String&nbsp;realPath&nbsp;=&nbsp;new&nbsp;File(uri).getAbsolutePath()&nbsp;+&nbsp;&quot;/libAnOrdinaryClass.dll&quot;;
		System.load(realPath);
	}
}</pre><p style="white-space: normal;"><br/></p><p style="white-space: normal;"><br/></p><p style="white-space: normal;">2.用MockUp来Mock类</p><p style="white-space: normal;"><br/></p><pre class="brush:java;toolbar:false">//用MockUp来mock类
public&nbsp;class&nbsp;ClassMockingByMockUpTest&nbsp;{
	//&nbsp;AnOrdinaryClass的MockUp类，继承MockUp即可
	public&nbsp;static&nbsp;class&nbsp;AnOrdinaryClassMockUp&nbsp;extends&nbsp;MockUp&lt;AnOrdinaryClass&gt;&nbsp;{
		//&nbsp;Mock静态方法
		@Mock
		public&nbsp;static&nbsp;int&nbsp;staticMethod()&nbsp;{
			return&nbsp;10;
		}

		//&nbsp;Mock普通方法
		@Mock
		public&nbsp;int&nbsp;ordinaryMethod()&nbsp;{
			return&nbsp;20;
		}

		@Mock
		//&nbsp;Mock&nbsp;final方法
		public&nbsp;final&nbsp;int&nbsp;finalMethod()&nbsp;{
			return&nbsp;30;
		}

		//&nbsp;Mock&nbsp;native方法
		@Mock
		public&nbsp;int&nbsp;navtiveMethod()&nbsp;{
			return&nbsp;40;
		}

		//&nbsp;Mock&nbsp;private方法
		@Mock
		private&nbsp;int&nbsp;privateMethod()&nbsp;{
			return&nbsp;50;
		}
	}

	@Test
	public&nbsp;void&nbsp;testClassMockingByMockUp()&nbsp;{
		new&nbsp;AnOrdinaryClassMockUp();
		AnOrdinaryClass&nbsp;instance&nbsp;=&nbsp;new&nbsp;AnOrdinaryClass();
		//&nbsp;静态方法被mock了
		Assert.assertTrue(AnOrdinaryClass.staticMethod()&nbsp;==&nbsp;10);
		//&nbsp;普通方法被mock了
		Assert.assertTrue(instance.ordinaryMethod()&nbsp;==&nbsp;20);
		//&nbsp;final方法被mock了
		Assert.assertTrue(instance.finalMethod()&nbsp;==&nbsp;30);
		//&nbsp;native方法被mock了
		Assert.assertTrue(instance.navtiveMethod()&nbsp;==&nbsp;40);
		//&nbsp;private方法被mock了
		Assert.assertTrue(instance.callPrivateMethod()&nbsp;==&nbsp;50);
	}

	@BeforeClass
	//&nbsp;加载AnOrdinaryClass类的native方法的dll
	public&nbsp;static&nbsp;void&nbsp;loadNative()&nbsp;throws&nbsp;Throwable&nbsp;{
		URI&nbsp;uri&nbsp;=&nbsp;ClassLoader.class.getResource(&quot;/&quot;).toURI();
		String&nbsp;realPath&nbsp;=&nbsp;new&nbsp;File(uri).getAbsolutePath()&nbsp;+&nbsp;&quot;/libAnOrdinaryClass.dll&quot;;
		System.load(realPath);
	}
}</pre><p style="white-space: normal;"><br/></p></div>
		<script type="text/javascript">
  	uParse('#articleContent', {
	    rootPath: '/static/ueditor/'
		})
	</script>
		
	</div>
	<!--/row-->
</div>
<!--/.fluid-container-->


<hr>
<footer>
	<p>
		<span>&copy; JMockit中文网 2017</span>&nbsp;<span><a href="showChannel.htm%3Fchannel=6">关于本站</a></span>&nbsp;<span><a href="static/images/coffee.png" target="_blank">打赏咖啡</a></span>
	</p>
</footer> 
</body>
</html>
