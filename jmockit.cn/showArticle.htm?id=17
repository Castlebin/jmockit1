

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>JMockit中文网</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="">
<meta name="author" content="">
<link rel="icon" href="static/images/icon.jpg" type="image/jpg">
<!-- Le styles -->
<link href="static/bootstrap/css/bootstrap.css" rel="stylesheet">
<style type="text/css">
body {
	padding-top: 60px;
	padding-bottom: 40px;
}

.sidebar-nav {
	padding: 9px 0;
}

@media ( max-width : 980px) {
	/* Enable use of floated navbar text */
	.navbar-text.pull-right {
		float: none;
		padding-left: 5px;
		padding-right: 5px;
	}
}
#channelNav  li  {
clear:none;
}
 
</style>
<link href="static/bootstrap/css/bootstrap-responsive.css" rel="stylesheet">

<script type="text/javascript" src="static/ueditor/ueditor.parse.js"></script>
<!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
<!--[if lt IE 9]>
      <script src="/static/bootstrap/js/html5shiv.js"></script>
    <![endif]-->

</head>
<body>
	<div class="navbar navbar-inverse navbar-fixed-top">
		<div class="navbar-inner">
			<div class="container-fluid">
				<button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
					<span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span>
				</button>
				<a class="brand" href="index.htm">JMockit中文网</a>
				<div class="nav-collapse collapse">
					<!-- 
					<p class="navbar-text pull-right">
						Logged in as <a href="#" class="navbar-link">Username</a>
					</p>
					 -->
					<ul class="nav" id="channelNav">

						
							<li ><a href="showChannel.htm?channel=1">JMockit简介 </a></li>
						
							<li ><a href="showChannel.htm?channel=2">JMockit基础 </a></li>
						
							<li ><a href="showChannel.htm?channel=3">JMockit常见用法 </a></li>
						
							<li class="active"><a href="showChannel.htm?channel=4">JMockit高级用法 </a></li>
						
							<li ><a href="showChannel.htm?channel=5">JMockit原理剖析 </a></li>
						
						<li><a href="https://github.com/hzdavid/jmockit.cn/issues" target="_blank">交流社区</a></li>

					</ul>
				</div>
				<!--/.nav-collapse -->
			</div>
		</div>
	</div>
<div class="container-fluid">
	<div class="row-fluid">
		
			<div class="span3">
				<div class="well sidebar-nav">
					<ul class="nav nav-list">
						
							<li ><a href="showArticle.htm?id=14">Mock构造函数&初始代码块 </a></li>
						
							<li ><a href="showArticle.htm?id=15">Mock一类多实例 </a></li>
						
							<li class="active"><a href="showArticle.htm?id=17">Mock泛型(类型变量） </a></li>
						
							<li ><a href="showArticle.htm?id=18">Mock方法中调用老方法 </a></li>
						

					</ul>
				</div>
			</div>
		
		<div class="span9 text-left" id="articleContent"><p>在JMockit基础知识中，我们学过可以用@Capturing用于对某个类或接口未来的实例进行Mock。</p><p>这里也可以利用MockUp的泛型(类型变量)Mock功能，一样可以达到某个类或接口未来的实例进行Mock的效果。只不过，我们可以享受</p><p>在MockUp中手工写Mock方法更直接的Mock方式。</p><p>以<a href="showArticle.htm?id=11" target="_blank">如何Mock接口</a>中的AnOrdinaryInterface为例：</p><pre class="brush:java;toolbar:false">//Mock泛型
public&nbsp;class&nbsp;GenericMockUpTest&nbsp;{
	@Test
	public&nbsp;&lt;T&nbsp;extends&nbsp;AnOrdinaryInterface&gt;&nbsp;void&nbsp;testMockUp()&nbsp;{
		//&nbsp;通过传给MockUp一个泛型类型变量，MockUp可以对这个类型变量的上限进行Mock，以后所有这个上限的方法调用，就会走Mock后的逻辑
		new&nbsp;MockUp&lt;T&gt;()&nbsp;{
			@Mock
			public&nbsp;int&nbsp;method1()&nbsp;{
				return&nbsp;10;
			}

			@Mock
			public&nbsp;int&nbsp;method2()&nbsp;{
				return&nbsp;20;
			}
		};
		//&nbsp;自定义一个AnOrdinaryInterface的实现
		AnOrdinaryInterface&nbsp;instance1&nbsp;=&nbsp;new&nbsp;AnOrdinaryInterface()&nbsp;{
			@Override
			public&nbsp;int&nbsp;method1()&nbsp;{
				return&nbsp;1;
			}

			@Override
			public&nbsp;int&nbsp;method2()&nbsp;{
				return&nbsp;1;
			}
		};
		//&nbsp;再定义一个AnOrdinaryInterface的实现
		AnOrdinaryInterface&nbsp;instance2&nbsp;=&nbsp;new&nbsp;AnOrdinaryInterface()&nbsp;{
			@Override
			public&nbsp;int&nbsp;method1()&nbsp;{
				return&nbsp;2;
			}

			@Override
			public&nbsp;int&nbsp;method2()&nbsp;{

				return&nbsp;2;
			}
		};
		//&nbsp;发现自定义的实现没有被作用，而是被Mock逻辑替代了
		Assert.assertTrue(instance1.method1()&nbsp;==&nbsp;10);
		Assert.assertTrue(instance2.method1()&nbsp;==&nbsp;10);
		Assert.assertTrue(instance1.method2()&nbsp;==&nbsp;20);
		Assert.assertTrue(instance2.method2()&nbsp;==&nbsp;20);
	}

	//&nbsp;其实用@Capturing也是一样的效果
	@Test
	public&nbsp;&lt;T&nbsp;extends&nbsp;AnOrdinaryInterface&gt;&nbsp;void&nbsp;sameEffect(@Capturing&nbsp;AnOrdinaryInterface&nbsp;instance)&nbsp;{
		new&nbsp;Expectations()&nbsp;{
			{
				instance.method1();
				result&nbsp;=&nbsp;10;
				instance.method2();
				result&nbsp;=&nbsp;20;
			}
		};
		//&nbsp;自定义一个AnOrdinaryInterface的实现
		AnOrdinaryInterface&nbsp;instance1&nbsp;=&nbsp;new&nbsp;AnOrdinaryInterface()&nbsp;{
			@Override
			public&nbsp;int&nbsp;method1()&nbsp;{
				return&nbsp;1;
			}

			@Override
			public&nbsp;int&nbsp;method2()&nbsp;{
				return&nbsp;1;
			}
		};
		//&nbsp;再定义一个AnOrdinaryInterface的实现
		AnOrdinaryInterface&nbsp;instance2&nbsp;=&nbsp;new&nbsp;AnOrdinaryInterface()&nbsp;{
			@Override
			public&nbsp;int&nbsp;method1()&nbsp;{
				return&nbsp;2;
			}

			@Override
			public&nbsp;int&nbsp;method2()&nbsp;{

				return&nbsp;2;
			}
		};
		//&nbsp;发现自定义的实现没有被作用，而是被Mock逻辑替代了
		Assert.assertTrue(instance1.method1()&nbsp;==&nbsp;10);
		Assert.assertTrue(instance2.method1()&nbsp;==&nbsp;10);
		Assert.assertTrue(instance1.method2()&nbsp;==&nbsp;20);
		Assert.assertTrue(instance2.method2()&nbsp;==&nbsp;20);
	}
}</pre><p><br/></p></div>
		<script type="text/javascript">
  	uParse('#articleContent', {
	    rootPath: '/static/ueditor/'
		})
	</script>
		
	</div>
	<!--/row-->
</div>
<!--/.fluid-container-->


<hr>
<footer>
	<p>
		<span>&copy; JMockit中文网 2017</span>&nbsp;<span><a href="showChannel.htm?channel=6">关于本站</a></span>&nbsp;<span><a href="static/images/coffee.png" target="_blank">打赏咖啡</a></span>
	</p>
</footer> 
</body>
</html>
