

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="utf-8">
<title>JMockit中文网</title>
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<meta name="description" content="">
<meta name="author" content="">
<link rel="icon" href="static/images/icon.jpg" type="image/jpg">
<!-- Le styles -->
<link href="static/bootstrap/css/bootstrap.css" rel="stylesheet">
<style type="text/css">
body {
	padding-top: 60px;
	padding-bottom: 40px;
}

.sidebar-nav {
	padding: 9px 0;
}

@media ( max-width : 980px) {
	/* Enable use of floated navbar text */
	.navbar-text.pull-right {
		float: none;
		padding-left: 5px;
		padding-right: 5px;
	}
}
#channelNav  li  {
clear:none;
}
 
</style>
<link href="static/bootstrap/css/bootstrap-responsive.css" rel="stylesheet">

<script type="text/javascript" src="static/ueditor/ueditor.parse.js"></script>
<!-- HTML5 shim, for IE6-8 support of HTML5 elements -->
<!--[if lt IE 9]>
      <script src="/static/bootstrap/js/html5shiv.js"></script>
    <![endif]-->

</head>
<body>
	<div class="navbar navbar-inverse navbar-fixed-top">
		<div class="navbar-inner">
			<div class="container-fluid">
				<button type="button" class="btn btn-navbar" data-toggle="collapse" data-target=".nav-collapse">
					<span class="icon-bar"></span> <span class="icon-bar"></span> <span class="icon-bar"></span>
				</button>
				<a class="brand" href="index.htm">JMockit中文网</a>
				<div class="nav-collapse collapse">
					<!-- 
					<p class="navbar-text pull-right">
						Logged in as <a href="#" class="navbar-link">Username</a>
					</p>
					 -->
					<ul class="nav" id="channelNav">

						
							<li ><a href="showChannel.htm%3Fchannel=1">JMockit简介 </a></li>
						
							<li ><a href="showChannel.htm%3Fchannel=2">JMockit基础 </a></li>
						
							<li class="active"><a href="showChannel.htm%3Fchannel=3">JMockit常见用法 </a></li>
						
							<li ><a href="showChannel.htm%3Fchannel=4">JMockit高级用法 </a></li>
						
							<li ><a href="showChannel.htm%3Fchannel=5">JMockit原理剖析 </a></li>
						
						<li><a href="https://github.com/hzdavid/jmockit.cn/issues" target="_blank">交流社区</a></li>

					</ul>
				</div>
				<!--/.nav-collapse -->
			</div>
		</div>
	</div>
<div class="container-fluid">
	<div class="row-fluid">
		
			<div class="span3">
				<div class="well sidebar-nav">
					<ul class="nav nav-list">
						
							<li ><a href="showArticle.htm%3Fid=2">Mock类 </a></li>
						
							<li ><a href="showArticle.htm%3Fid=12">Mock实例 </a></li>
						
							<li class="active"><a href="showArticle.htm%3Fid=11">Mock接口 </a></li>
						
							<li ><a href="showArticle.htm%3Fid=13">Mock  Spring Bean </a></li>
						

					</ul>
				</div>
			</div>
		
		<div class="span9 text-left" id="articleContent"><p>在讲述如何Mock接口前，我们给出一个普通接口的代码。</p><pre class="brush:java;toolbar:false">//一个普通的接口
public&nbsp;interface&nbsp;AnOrdinaryInterface&nbsp;{
	//&nbsp;方法1
	public&nbsp;int&nbsp;method1();

	//&nbsp;方法2
	public&nbsp;int&nbsp;method2();
}</pre><p><br/></p><p>我们依然给出2种Mock接口的2种方法。</p><p><br/></p><ol class=" list-paddingleft-2" style="list-style-type: decimal;"><li><p><span style="color: rgb(51, 51, 51); font-family: &quot;Helvetica Neue&quot;, Helvetica, Arial, sans-serif; background-color: rgb(255, 255, 255); font-size: 16px;">用Expectations来Mock</span></p></li><pre class="brush:java;toolbar:false">//用Expectations来mock接口
public&nbsp;class&nbsp;InterfaceMockingByExpectationsTest&nbsp;{

	//&nbsp;通过@Injectable，让JMockit帮我们生成这个接口的实例，
	//&nbsp;一般来说，接口是给类来依赖的，我们给待测试的类加上@Tested，就可以让JMockit做依赖注入。详细见JMockit基础的章节
	@Injectable
	AnOrdinaryInterface&nbsp;anOrdinaryInterface;

	@Test
	public&nbsp;void&nbsp;testInterfaceMockingByExpectation()&nbsp;{
		//&nbsp;录制
		new&nbsp;Expectations()&nbsp;{
			{
				anOrdinaryInterface.method1();
				result&nbsp;=&nbsp;10;
				anOrdinaryInterface.method2();
				result&nbsp;=&nbsp;20;
			}
		};
		Assert.assertTrue(anOrdinaryInterface.method1()&nbsp;==&nbsp;10);
		Assert.assertTrue(anOrdinaryInterface.method2()&nbsp;==&nbsp;20);
	}
}</pre><li><p>用MockUp来Mock</p></li><pre class="brush:java;toolbar:false">//用MockUp来mock接口
public&nbsp;class&nbsp;InterfaceMockingByMockUpTest&nbsp;{

	@Test
	public&nbsp;void&nbsp;testInterfaceMockingByMockUp()&nbsp;{
		//&nbsp;手工通过MockUp创建这个接口的实例
		AnOrdinaryInterface&nbsp;anOrdinaryInterface&nbsp;=&nbsp;new&nbsp;MockUp&lt;AnOrdinaryInterface&gt;(AnOrdinaryInterface.class)&nbsp;{
			//&nbsp;对方法Mock
			@Mock
			public&nbsp;int&nbsp;method1()&nbsp;{
				return&nbsp;10;
			}

			@Mock
			public&nbsp;int&nbsp;method2()&nbsp;{
				return&nbsp;20;
			}
		}.getMockInstance();

		Assert.assertTrue(anOrdinaryInterface.method1()&nbsp;==&nbsp;10);
		Assert.assertTrue(anOrdinaryInterface.method2()&nbsp;==&nbsp;20);
	}
}</pre></ol><p>显然， 在Mock接口时，使用@Injectable注解API，比使用MockUp更方便。单纯通过MockUp生成接口的某个Mock实例，在实际的测试场景中并没有多大用途，接口就是用来给类依赖的，我们要充分利用JMockit的依赖注入功能。</p></div>
		<script type="text/javascript">
  	uParse('#articleContent', {
	    rootPath: '/static/ueditor/'
		})
	</script>
		
	</div>
	<!--/row-->
</div>
<!--/.fluid-container-->


<hr>
<footer>
	<p>
		<span>&copy; JMockit中文网 2017</span>&nbsp;<span><a href="showChannel.htm%3Fchannel=6">关于本站</a></span>&nbsp;<span><a href="static/images/coffee.png" target="_blank">打赏咖啡</a></span>
	</p>
</footer> 
</body>
</html>
